#include "HttpConnection.h"
#include <iostream>
#include "LogicSystem.h"

HttpConnection::HttpConnection(boost::asio::io_context& ioc): _socket(ioc) {
}

void HttpConnection::Start()
{
    auto self = shared_from_this();
    http::async_read(_socket, _buffer, _request, [self](beast::error_code ec,
        std::size_t bytes_transferred) {
            try {
                if (ec) {
                    std::cout << "http read err is " << ec.what() << std::endl;
                    return;
                }

                //处理读到的数据
                boost::ignore_unused(bytes_transferred);
                self->HandleReq();
                self->CheckDeadline();
            }
            catch (std::exception& exp) {
                std::cout << "exception is " << exp.what() << std::endl;
            }
        }
    );
}


//char 转为16进制
unsigned char ToHex(unsigned char x)
{
    return  x > 9 ? x + 55 : x + 48;
}

unsigned char FromHex(unsigned char x)
{
    unsigned char y;
    if (x >= 'A' && x <= 'Z') y = x - 'A' + 10;
    else if (x >= 'a' && x <= 'z') y = x - 'a' + 10;
    else if (x >= '0' && x <= '9') y = x - '0';
    else assert(0);
    return y;
}

//Url编码函数
std::string UrlEncode(const std::string& str)
{
    std::string strTemp = "";
    size_t length = str.length();
    for (size_t i = 0; i < length; i++)
    {
        //判断是否仅有数字和字母构成
        //如果字符是字母、数字、-、_、. 或 ~，直接添加到 strTemp 中
        if (isalnum((unsigned char)str[i]) ||
            (str[i] == '-') ||
            (str[i] == '_') ||
            (str[i] == '.') ||
            (str[i] == '~'))
            strTemp += str[i];
        else if (str[i] == ' ') //为空字符
            strTemp += "+";
        else
        {
            //其他字符需要提前加%并且高四位和低四位分别转为16进制
            strTemp += '%';
            strTemp += ToHex((unsigned char)str[i] >> 4);
            strTemp += ToHex((unsigned char)str[i] & 0x0F);
        }
    }
    return strTemp;
}

//Url解码函数
std::string UrlDecode(const std::string& str)
{
    std::string strTemp = "";
    size_t length = str.length();
    for (size_t i = 0; i < length; i++)
    {
        //还原+为空
        if (str[i] == '+') strTemp += ' ';
        //遇到%将后面的两个字符从16进制转为char再拼接
        else if (str[i] == '%')
        {
            assert(i + 2 < length);
            unsigned char high = FromHex((unsigned char)str[++i]);
            unsigned char low = FromHex((unsigned char)str[++i]);
            strTemp += high * 16 + low;
        }
        else strTemp += str[i];
    }
    return strTemp;
}

//解析Url中的参数
void HttpConnection::PreParseGetParam() {
    // 提取 URI  
    auto uri = _request.target();
    // 查找查询字符串的开始位置（即 '?' 的位置）  
    auto query_pos = uri.find('?');
    // 没有问号，说明是不带参数的请求
    if (query_pos == std::string::npos) {
        _get_url = uri;
        return;
    }

    // get_url包含了从0到?之前的的位置
    _get_url = uri.substr(0, query_pos);

    // query_string从？后一位开始到字符串结尾
    std::string query_string = uri.substr(query_pos + 1);
    std::string key;
    std::string value;
    size_t pos = 0;

    // 循环找'&'，&之前的就是key=value的形式
    while ((pos = query_string.find('&')) != std::string::npos) {
        auto pair = query_string.substr(0, pos);
        size_t eq_pos = pair.find('=');
        if (eq_pos != std::string::npos) {
            key = UrlDecode(pair.substr(0, eq_pos)); // 先取key然后解码  
            value = UrlDecode(pair.substr(eq_pos + 1)); // 先取value然后解码
            _get_params[key] = value;
        }
        query_string.erase(0, pos + 1);
    }
    // 处理最后一个参数对（如果没有 & 分隔符）  
    if (!query_string.empty()) {
        size_t eq_pos = query_string.find('=');
        if (eq_pos != std::string::npos) {
            key = UrlDecode(query_string.substr(0, eq_pos));
            value = UrlDecode(query_string.substr(eq_pos + 1));
            _get_params[key] = value;
        }
    }
}

void HttpConnection::HandleReq() {
    // 设置响应的 HTTP 版本
    _response.version(_request.version());

    // 设置连接为短连接（即在响应后关闭连接）
    _response.keep_alive(false);

    // 处理 GET 请求
    if (_request.method() == http::verb::get) {
        // 使用 LogicSystem 处理 GET 请求
        PreParseGetParam();
        bool success = LogicSystem::GetInstance()->HandleGet(_get_url, shared_from_this());

        // 如果处理失败，设置响应状态为 404 Not Found。 
        // 设置响应头中的 Content-Type 字段为 text/plain。 
        // 使用 beast::ostream 向响应体中写入 "url not found\r\n"。 
        // 调用 WriteResponse 方法发送响应。
        if (!success) {
            _response.result(http::status::not_found);
            _response.set(http::field::content_type, "text/plain");
            beast::ostream(_response.body()) << "url not found\r\n";
            WriteResponse();
            return;
        }

        // 如果处理成功，返回 200 OK 响应
        // 设置响应头中的 Server 字段为 "GateServer"
        // 调用 WriteResponse 方法发送响应
        _response.result(http::status::ok);
        _response.set(http::field::server, "GateServer");
        WriteResponse();
        return;
    }
    //处理POST请求
    if (_request.method() == http::verb::post) {
        bool success = LogicSystem::GetInstance()->HandlePost(_request.target(), shared_from_this());

        //如果处理失败
        if (!success) {
            // 如果处理失败，设置响应状态为 404 Not Found。 
            // 设置响应头中的 Content-Type 字段为 text/plain。 
            // 使用 beast::ostream 向响应体中写入 "url not found\r\n"。 
            // 调用 WriteResponse 方法发送响应。
            _response.result(http::status::not_found);
            _response.set(http::field::content_type, "text/plain");
            beast::ostream(_response.body()) << "url not found\r\n";
            WriteResponse();
            return;
        }

        // 如果处理成功，返回 200 OK 响应
        // 设置响应头中的 Server 字段为 "GateServer"
        // 调用 WriteResponse 方法发送响应
        _response.result(http::status::ok);
        _response.set(http::field::server, "GateServer");
        WriteResponse();
        return;
    }
}


void HttpConnection::WriteResponse() {
    auto self = shared_from_this();
    //设置 HTTP 响应头中的 Content-Length 字段为响应体的大小。这样客户端就知道接下来要读取的响应体的长度
    _response.content_length(_response.body().size());

    /*
    http::async_write 是一个异步写操作，用于将 HTTP 响应消息发送到客户端
    _socket：用于发送数据的 TCP 套接字
    _response：要发送的 HTTP 响应消息
    第三个参数是一个 lambda 回调函数，在写操作完成后被调用
    beast::error_code ec：错误码，如果写入过程中发生错误，则 ec 会包含相关的错误信息
    std::size_t：已写入的字节数
    */
    http::async_write(_socket,_response,
        [self](beast::error_code ec, std::size_t)
        {
            //关闭套接字的发送方向，通知客户端没有更多的数据要发送。这使用了 TCP 套接字的 shutdown_send 选项
            self->_socket.shutdown(tcp::socket::shutdown_send, ec);
            //取消定时器，停止任何与该连接相关的超时操作
            self->deadline_.cancel();
        });
}

//检查连接的超时时间，并在超时后关闭套接字
void HttpConnection::CheckDeadline() {
    auto self = shared_from_this();

    deadline_.async_wait(
        [self](beast::error_code ec)
        {
            if (!ec)
            {
                // Close socket to cancel any outstanding operation.
                self->_socket.close(ec);
            }
        });
} 